# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FmYYy3VuK7GBWspd2RyiXAeR_hLPEhJ_

**Task 07: Querying RDF(s)**
"""

#!pip install rdflib
import urllib.request
url = 'https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/refs/heads/master/Assignment4/course_materials/python/validation.py'
urllib.request.urlretrieve(url, 'validation.py')
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/master/Assignment4/course_materials"

from validation import Report

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
# Do not change the name of the variables
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.parse(github_storage+"/rdf/data06.ttl", format="TTL")
report = Report()

"""**TASK 7.1a: For all classes, list each classURI. If the class belogs to another class, then list its superclass.**
**Do the exercise in RDFLib returning a list of Tuples: (class, superclass) called "result". If a class does not have a super class, then return None as the superclass**
"""

# TO DO
# Visualize the results
result = [] #list of tuples
for s, p, o in g.triples((None, RDF.type, RDFS.Class)):
  superclass = g.value(s, RDFS.subClassOf, None)
  result.append((s, superclass))

for r in result:
  print(r)

## Validation: Do not remove
report.validate_07_1a(result)

"""
**TASK 7.1b: Repeat the same exercise in SPARQL, returning the variables ?c (class) and ?sc (superclass)**"""

query =  """
SELECT ?c ?sc
WHERE {
  ?c a rdfs:Class .
  OPTIONAL {
    ?c rdfs:subClassOf ?sc
    }
}
"""

for r in g.query(query):
  print(r.c, r.sc)

## Validation: Do not remove
report.validate_07_1b(query,g)

"""**TASK 7.2a: List all individuals of "Person" with RDFLib (remember the subClasses). Return the individual URIs in a list called "individuals"**

"""

ns = Namespace("http://oeg.fi.upm.es/def/people#")
individuals = []
# visualize results
for s, p, o in g.triples((None, RDF.type, ns.Person)):
  if s not in individuals:
    individuals.append(s)

def subClasses(cls):    
    subclasses = set()
    for sub, _, _ in g.triples((None, RDFS.subClassOf, cls)):
        if sub not in subclasses:
            subclasses.add(sub)
            for i in subClasses(sub):
                if i not in subclasses:
                    subclasses.add(i)
    return subclasses

for subclass in subClasses(ns.Person):
    for ind, p_ind, o_ind in g.triples((None, RDF.type, subclass)):
        if ind not in individuals:
            individuals.append(ind)

for i in individuals:
  print(i)

"""**TASK 7.2b: Repeat the same exercise in SPARQL, returning the individual URIs in a variable ?ind**"""

query =  """
PREFIX ns: <http://oeg.fi.upm.es/def/people#>
SELECT ?ind WHERE {
  ?ind a ?type .
  ?type rdfs:subClassOf* ns:Person .
}
"""
# Visualize the results
for r in g.query(query):
  print(r.ind)

## Validation: Do not remove
report.validate_07_02b(g, query)

"""**TASK 7.3:  List the name and type of those who know Rocky (in SPARQL only). Use name and type as variables in the query**"""

query = """
PREFIX ns: <http://oeg.fi.upm.es/def/people#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?name ?type WHERE {
  ?person ns:knows ns:Rocky .
  ?person rdfs:label ?name .
  ?person a ?type .
}
"""
# TO DO
# Visualize the results
for r in g.query(query):
  print(r.name, r.type)

## Validation: Do not remove
report.validate_07_03(g, query)

"""**Task 7.4: List the name of those entities who have a colleague with a dog, or that have a collegue who has a colleague who has a dog (in SPARQL). Return the results in a variable called name**"""

query =  """
PREFIX ns: <http://oeg.fi.upm.es/def/people#>
SELECT DISTINCT ?name WHERE {
    ?person rdfs:label ?name .
    {
        ?person ns:hasColleague ?colleague .
        ?colleague ns:ownsPet ?dog .
    } UNION {
        ?person ns:hasColleague ?colleague1 .
        ?colleague1 ns:hasColleague ?colleague2 .
        ?colleague2 ns:ownsPet ?dog1 .
    }
}
"""

for r in g.query(query):
  print(r.name)

## Validation: Do not remove
report.validate_07_04(g,query)
report.save_report("_Task_07")