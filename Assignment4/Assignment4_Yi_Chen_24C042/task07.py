# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EFw5VunhA1v5h15_jENqCAmlhadYAtlu

**Task 07: Querying RDF(s)**
"""

#!pip install rdflib
import urllib.request
url = 'https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/refs/heads/master/Assignment4/course_materials/python/validation.py'
urllib.request.urlretrieve(url, 'validation.py')
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/master/Assignment4/course_materials"

from validation import Report

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
# Do not change the name of the variables
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.parse(github_storage+"/rdf/data06.ttl", format="TTL")
report = Report()

"""**TASK 7.1a: For all classes, list each classURI. If the class belogs to another class, then list its superclass.**
**Do the exercise in RDFLib returning a list of Tuples: (class, superclass) called "result". If a class does not have a super class, then return None as the superclass**
"""

# TO DO
# Visualize the results
result = [] #list of tuples
for s, p, o in g.triples((None, RDF.type, RDFS.Class)):
  superclass = None
  for s2, p2, o2 in g.triples((s, RDFS.subClassOf, None)):
    superclass = o2
  result.append((s, superclass))
for r in result:
  print(r)

## Validation: Do not remove
report.validate_07_1a(result)

"""**TASK 7.1b: Repeat the same exercise in SPARQL, returning the variables ?c (class) and ?sc (superclass)**"""

query =  """
Select ?c ?sc WHERE {
  ?c rdf:type rdfs:Class.
  OPTIONAL {?c rdfs:subClassOf ?sc.}
}
"""
for r in g.query(query):
  print(r.c, r.sc)

## Validation: Do not remove
report.validate_07_1b(query,g)

"""**TASK 7.2a: List all individuals of "Person" with RDFLib (remember the subClasses). Return the individual URIs in a list called "individuals"**

"""

ns = Namespace("http://oeg.fi.upm.es/def/people#")

# variable to return
individuals = []
all_classes = [ns.Person]
for clase in all_classes:
  for s, p, o in g.triples((None, RDFS.subClassOf, clase)):
    if s not in all_classes:
      all_classes.append(s)
for clase in all_classes:
  for s2, p2, o2 in g.triples((None, RDF.type, clase)):
    individuals.append(s2)
# visualize results
for i in individuals:
  print(i)

# validation. Do not remove
report.validate_07_02a(individuals)

"""**TASK 7.2b: Repeat the same exercise in SPARQL, returning the individual URIs in a variable ?ind**"""

query =  """
prefix ns: <http://oeg.fi.upm.es/def/people#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
Select ?ind WHERE{
  ?ind rdf:type ?class.
  ?class rdfs:subClassOf* ns:Person.
}

"""
for r in g.query(query):
  print(r.ind)
# Visualize the results

## Validation: Do not remove
report.validate_07_02b(g, query)

"""**TASK 7.3:  List the name and type of those who know Rocky (in SPARQL only). Use name and type as variables in the query**"""

query =  """
prefix ns: <http://oeg.fi.upm.es/def/people#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
select ?name ?type WHERE{
  ?name ns:knows ns:Rocky.
  ?name rdf:type ?type.
}
"""
# TO DO
# Visualize the results
for r in g.query(query):
  print(r.name, r.type)

## Validation: Do not remove
report.validate_07_03(g, query)

"""**Task 7.4: List the name of those entities who have a colleague with a dog, or that have a collegue who has a colleague who has a dog (in SPARQL). Return the results in a variable called name**"""

query =  """
prefix ns: <http://oeg.fi.upm.es/def/people#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
select ?name WHERE{
  {
    ?name ns:hasColleague ?colleague.
    ?colleague ns:ownsPet ?dog.
  }
  UNION
  {
    ?name ns:hasColleague ?colleague1.
    ?colleague1 ns:hasColleague ?colleague2.
    ?colleague2 ns:ownsPet ?dog.
  }
}
"""
for r in g.query(query):
  print(r.name)

# TO DO
# Visualize the results

## Validation: Do not remove
report.validate_07_04(g,query)
report.save_report("_Task_07")