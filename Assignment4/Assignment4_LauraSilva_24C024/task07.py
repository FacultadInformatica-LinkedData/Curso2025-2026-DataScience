# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/Laauraaxsc/Curso2025-2026-DataScience/blob/master/Assignment4/course_materials/notebooks/Task07.ipynb

**Task 07: Querying RDF(s)**
"""

#!pip install rdflib
import urllib.request
url = 'https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/refs/heads/master/Assignment4/course_materials/python/validation.py'
urllib.request.urlretrieve(url, 'validation.py')
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/master/Assignment4/course_materials"

from validation import Report

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
# Do not change the name of the variables
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.parse(github_storage+"/rdf/data06.ttl", format="TTL")
report = Report()

"""**TASK 7.1a: For all classes, list each classURI. If the class belogs to another class, then list its superclass.**
**Do the exercise in RDFLib returning a list of Tuples: (class, superclass) called "result". If a class does not have a super class, then return None as the superclass**
"""

# TO DO

def listar_clases_y_superclase(grafo):
    clases = set(grafo.subjects(RDF.type, RDFS.Class))
    clases.update(grafo.subjects(RDFS.subClassOf, None))
    clases.update(grafo.objects(None, RDFS.subClassOf))

    resultado = []
    for c in clases:
        sc = grafo.value(subject=c, predicate=RDFS.subClassOf, object=None)
        resultado.append((c, sc))
    return resultado

# Visualize the results
result = listar_clases_y_superclase(g) #list of tuples
for r in result:
  print(r)

## Validation: Do not remove
report.validate_07_1a(result)

"""**TASK 7.1b: Repeat the same exercise in SPARQL, returning the variables ?c (class) and ?sc (superclass)**"""

query = """
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?c ?sc
WHERE {
  {
    { ?c a rdfs:Class }
    UNION
    { ?c rdfs:subClassOf ?_any }
    UNION
    { ?_x rdfs:subClassOf ?c }
  }
  OPTIONAL { ?c rdfs:subClassOf ?sc }
}
"""

for r in g.query(query):
  print(r.c, r.sc)

# Validation: Do not remove
report.validate_07_1b(query,g)

"""**TASK 7.2a: List all individuals of "Person" with RDFLib (remember the subClasses). Return the individual URIs in a list called "individuals"**

"""

ns = Namespace("http://oeg.fi.upm.es/def/people#")

clase_person = ns.Person
clases = [clase_person]

for c in clases:
    for sc in g.subjects(RDFS.subClassOf, c):
        if sc not in clases:
            clases.append(sc)

individuals = []
for c in clases:
    for ind in g.subjects(RDF.type, c):
        if ind not in individuals:
            individuals.append(ind)

for i in individuals:
    print(i)

# validation. Do not remove
report.validate_07_02a(individuals)

"""**TASK 7.2b: Repeat the same exercise in SPARQL, returning the individual URIs in a variable ?ind**"""

query = """
PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ns:   <http://oeg.fi.upm.es/def/people#>

SELECT DISTINCT ?ind
WHERE {
  ?c rdfs:subClassOf* ns:Person .
  ?ind rdf:type ?c .
}
"""

for r in g.query(query):
  print(r.ind)
# Visualize the results

## Validation: Do not remove
report.validate_07_02b(g, query)

"""**TASK 7.3:  List the name and type of those who know Rocky (in SPARQL only). Use name and type as variables in the query**"""

query = """
PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ns:   <http://oeg.fi.upm.es/def/people#>

SELECT DISTINCT ?name ?type
WHERE {
  ?ind ?p ns:Rocky .
  ?ind rdfs:label ?name .
  ?ind rdf:type ?type .
}
"""
# Visualize the results
for r in g.query(query):
  print(r.name, r.type)

## Validation: Do not remove
report.validate_07_03(g, query)

"""**Task 7.4: List the name of those entities who have a colleague with a dog, or that have a collegue who has a colleague who has a dog (in SPARQL). Return the results in a variable called name**"""

query = """
PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ns:   <http://oeg.fi.upm.es/def/people#>

SELECT DISTINCT ?name
WHERE {
  ?ind rdfs:label ?name .

  {
    ?ind ns:hasColleague ?c .
  }
  UNION
  {
    ?ind ns:hasColleague/ns:hasColleague ?c .
  }

  ?c ?any ns:Rocky .
}
"""

for r in g.query(query):
  print(r.name)

# TO DO
# Visualize the results

## Validation: Do not remove
report.validate_07_04(g,query)
report.save_report("_Task_07")
