# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SOjhmnIPj8P7ZtU5eNmqrjcFwcbyG-Lb

**Task 07: Querying RDF(s)**
"""

#!pip install rdflib
import urllib.request
url = 'https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/refs/heads/master/Assignment4/course_materials/python/validation.py'
urllib.request.urlretrieve(url, 'validation.py')
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/master/Assignment4/course_materials"

from validation import Report

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
# Do not change the name of the variables
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.parse(github_storage+"/rdf/data06.ttl", format="TTL")
report = Report()

"""**TASK 7.1a: For all classes, list each classURI. If the class belogs to another class, then list its superclass.**
**Do the exercise in RDFLib returning a list of Tuples: (class, superclass) called "result". If a class does not have a super class, then return None as the superclass**
"""

# TO DO
result = [(c, g.value(subject=c, predicate=RDFS.subClassOf, object=None)) for c,p,o in g.triples((None, RDF.type, RDFS.Class))]
for r in result:
  print(r)

## Validation: Do not remove
report.validate_07_1a(result)

"""**TASK 7.1b: Repeat the same exercise in SPARQL, returning the variables ?c (class) and ?sc (superclass)**"""

query1 =  "SELECT ?c ?sc WHERE {?c rdf:type rdfs:Class. OPTIONAL {?c rdfs:subClassOf ?sc.}}"

for r in g.query(query1):
  print(r.c, r.sc)

## Validation: Do not remove
report.validate_07_1b(query1,g)

"""**TASK 7.2a: List all individuals of "Person" with RDFLib (remember the subClasses). Return the individual URIs in a list called "individuals"**

"""

ns = Namespace("http://oeg.fi.upm.es/def/people#")

# variable to return
individuals = []
def get_subclasses(cls):
    subclasses = set(g.subjects(RDFS.subClassOf, cls))
    all_subs = set(subclasses)
    for s in subclasses:
        all_subs = all_subs.union(get_subclasses(s))
    return all_subs

classes = {ns.Person} | get_subclasses(ns.Person)

for c in classes:
    for ind in g.subjects(RDF.type, c):
        individuals.append(ind)

for i in individuals:
  print(i)

# validation. Do not remove
report.validate_07_02a(individuals)

"""**TASK 7.2b: Repeat the same exercise in SPARQL, returning the individual URIs in a variable ?ind**"""

query2 =  """
SELECT DISTINCT ?ind
WHERE {
  ?clase rdfs:subClassOf* <http://oeg.fi.upm.es/def/people#Person> .
  ?ind a ?clase .
}
"""

for r in g.query(query2):
  print(r.ind)
# Visualize the results

## Validation: Do not remove
report.validate_07_02b(g, query2)

"""**TASK 7.3:  List the name and type of those who know Rocky (in SPARQL only). Use name and type as variables in the query**"""

query3 = """SELECT ?name ?type WHERE{
    ?name <http://oeg.fi.upm.es/def/people#knows> <http://oeg.fi.upm.es/def/people#Rocky>.
    ?name a ?type .
  }"""
# TO DO
for r in g.query(query3):
  print(r.name, r.type)

## Validation: Do not remove
report.validate_07_03(g, query3)

"""**Task 7.4: List the name of those entities who have a colleague with a dog, or that have a collegue who has a colleague who has a dog (in SPARQL). Return the results in a variable called name**"""

query4 =  """
SELECT ?name
WHERE {
  ?p <http://oeg.fi.upm.es/def/people#ownsPet> ?m.
  {?p <http://oeg.fi.upm.es/def/people#ownsPet> ?pet .
  ?name <http://oeg.fi.upm.es/def/people#hasColleague> ?p .}
  UNION
  {?p2 <http://oeg.fi.upm.es/def/people#hasColleague> ?p.
  ?name <http://oeg.fi.upm.es/def/people#hasColleague> ?p2.}
}
"""

for r in g.query(query4):
  print(r.name)

# TO DO
# Visualize the results

## Validation: Do not remove
report.validate_07_04(g,query4)
report.save_report("_Task_07")
